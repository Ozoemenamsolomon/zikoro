"use client";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { useRouter } from "next/navigation";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import React, { useEffect, useLayoutEffect, useRef } from "react";
import { calculateAndSetMaxHeight } from "@/utils/helpers";

const tabs = [
  {
    label: "designs",
    value: "designs",
    icon: (
      <svg
        width={21}
        height={20}
        viewBox="0 0 21 20"
        fill="currentColor"
        xmlns="http://www.w3.org/2000/svg"
        stroke="currentColor"
      >
        <path
          d="M0.5 0H20.5V20H0.5V0ZM2.5 2V6H18.5V2H2.5ZM18.5 8H9.5V18H18.5V8ZM7.5 18V8H2.5V18H7.5Z"
          fill="#3E404B"
        />
      </svg>
    ),
  },
  {
    label: "background",
    value: "background",
    icon: (
      <svg
        width={19}
        height={18}
        viewBox="0 0 19 18"
        fill="currentColor"
        xmlns="http://www.w3.org/2000/svg"
        stroke="currentColor"
      >
        <path
          d="M6 14C6.41667 14 6.771 13.8543 7.063 13.563C7.355 13.2717 7.50067 12.9173 7.5 12.5C7.5 12.0833 7.35433 11.7293 7.063 11.438C6.77167 11.1467 6.41733 11.0007 6 11C5.58333 11 5.22933 11.146 4.938 11.438C4.64667 11.73 4.50067 12.084 4.5 12.5C4.5 12.9167 4.646 13.271 4.938 13.563C5.23 13.855 5.584 14.0007 6 14ZM6 7C6.41667 7 6.771 6.85433 7.063 6.563C7.355 6.27167 7.50067 5.91733 7.5 5.5C7.5 5.08333 7.35433 4.72933 7.063 4.438C6.77167 4.14667 6.41733 4.00067 6 4C5.58333 4 5.22933 4.146 4.938 4.438C4.64667 4.73 4.50067 5.084 4.5 5.5C4.5 5.91667 4.646 6.271 4.938 6.563C5.23 6.855 5.584 7.00067 6 7ZM13 14C13.4167 14 13.771 13.8543 14.063 13.563C14.355 13.2717 14.5007 12.9173 14.5 12.5C14.5 12.0833 14.3543 11.7293 14.063 11.438C13.7717 11.1467 13.4173 11.0007 13 11C12.5833 11 12.2293 11.146 11.938 11.438C11.6467 11.73 11.5007 12.084 11.5 12.5C11.5 12.9167 11.646 13.271 11.938 13.563C12.23 13.855 12.584 14.0007 13 14ZM13 7C13.4167 7 13.771 6.85433 14.063 6.563C14.355 6.27167 14.5007 5.91733 14.5 5.5C14.5 5.08333 14.3543 4.72933 14.063 4.438C13.7717 4.14667 13.4173 4.00067 13 4C12.5833 4 12.2293 4.146 11.938 4.438C11.6467 4.73 11.5007 5.084 11.5 5.5C11.5 5.91667 11.646 6.271 11.938 6.563C12.23 6.855 12.584 7.00067 13 7ZM0.5 18V0H18.5V18H0.5ZM2.5 16H16.5V2H2.5V16Z"
          fill="#3E404B"
        />
      </svg>
    ),
  },
  {
    label: "text",
    value: "text",
    icon: (
      <svg
        width={15}
        height={16}
        viewBox="0 0 15 16"
        fill="currentColor"
        xmlns="http://www.w3.org/2000/svg"
        stroke="currentColor"
      >
        <path
          d="M5.5 15H7.5M7.5 15H9.5M7.5 15V1M7.5 1H1.5V2M7.5 1H13.5V2"
          stroke="#3E404B"
          strokeWidth={2}
          strokeLinecap="round"
          strokeLinejoin="round"
        />
      </svg>
    ),
  },
  {
    label: "element",
    value: "element",
    icon: (
      <svg
        width={25}
        height={24}
        viewBox="0 0 25 24"
        fill="currentColor"
        xmlns="http://www.w3.org/2000/svg"
        stroke="currentColor"
      >
        <path
          d="M14.5 4H20.5V10H14.5V4ZM4.5 14H10.5V20H4.5V14ZM14.5 17C14.5 17.7956 14.8161 18.5587 15.3787 19.1213C15.9413 19.6839 16.7044 20 17.5 20C18.2956 20 19.0587 19.6839 19.6213 19.1213C20.1839 18.5587 20.5 17.7956 20.5 17C20.5 16.2044 20.1839 15.4413 19.6213 14.8787C19.0587 14.3161 18.2956 14 17.5 14C16.7044 14 15.9413 14.3161 15.3787 14.8787C14.8161 15.4413 14.5 16.2044 14.5 17ZM4.5 7C4.5 7.39397 4.5776 7.78407 4.72836 8.14805C4.87913 8.51203 5.1001 8.84274 5.37868 9.12132C5.65726 9.3999 5.98797 9.62087 6.35195 9.77164C6.71593 9.9224 7.10603 10 7.5 10C7.89397 10 8.28407 9.9224 8.64805 9.77164C9.01203 9.62087 9.34274 9.3999 9.62132 9.12132C9.8999 8.84274 10.1209 8.51203 10.2716 8.14805C10.4224 7.78407 10.5 7.39397 10.5 7C10.5 6.60603 10.4224 6.21593 10.2716 5.85195C10.1209 5.48797 9.8999 5.15726 9.62132 4.87868C9.34274 4.6001 9.01203 4.37913 8.64805 4.22836C8.28407 4.0776 7.89397 4 7.5 4C7.10603 4 6.71593 4.0776 6.35195 4.22836C5.98797 4.37913 5.65726 4.6001 5.37868 4.87868C5.1001 5.15726 4.87913 5.48797 4.72836 5.85195C4.5776 6.21593 4.5 6.60603 4.5 7Z"
          stroke="#3E404B"
          strokeWidth={2}
          strokeLinecap="round"
          strokeLinejoin="round"
        />
      </svg>
    ),
  },
  {
    label: "verification",
    value: "verification",
    icon: (
      <svg
        width={19}
        height={22}
        viewBox="0 0 19 22"
        fill="currentColor"
        xmlns="http://www.w3.org/2000/svg"
        stroke="currentColor"
      >
        <path
          d="M9.5 0L0.5 4V10C0.5 15.55 4.34 20.74 9.5 22C14.66 20.74 18.5 15.55 18.5 10V4L9.5 0ZM9.5 4C10.2956 4 11.0587 4.31607 11.6213 4.87868C12.1839 5.44129 12.5 6.20435 12.5 7C12.5 7.79565 12.1839 8.55871 11.6213 9.12132C11.0587 9.68393 10.2956 10 9.5 10C8.70435 10 7.94129 9.68393 7.37868 9.12132C6.81607 8.55871 6.5 7.79565 6.5 7C6.5 6.20435 6.81607 5.44129 7.37868 4.87868C7.94129 4.31607 8.70435 4 9.5 4ZM14.63 16C13.4184 17.8547 11.6078 19.2382 9.5 19.92C7.39217 19.2382 5.58162 17.8547 4.37 16C4.03 15.5 3.74 15 3.5 14.47C3.5 12.82 6.21 11.47 9.5 11.47C12.79 11.47 15.5 12.79 15.5 14.47C15.26 15 14.97 15.5 14.63 16Z"
          fill="#3E404B"
        />
      </svg>
    ),
  },
  {
    label: "settings",
    value: "settings",
    icon: (
      <svg
        width={21}
        height={22}
        viewBox="0 0 21 22"
        fill="currentColor"
        xmlns="http://www.w3.org/2000/svg"
        stroke="currentColor"
      >
        <path
          d="M10.5 14C12.1569 14 13.5 12.6569 13.5 11C13.5 9.34315 12.1569 8 10.5 8C8.84315 8 7.5 9.34315 7.5 11C7.5 12.6569 8.84315 14 10.5 14Z"
          stroke="#001FCC"
          strokeWidth="1.5"
        />
        <path
          d="M12.2655 1.152C11.8985 1 11.4325 1 10.5005 1C9.56845 1 9.10245 1 8.73545 1.152C8.49263 1.25251 8.272 1.3999 8.08617 1.58572C7.90035 1.77155 7.75296 1.99218 7.65245 2.235C7.56045 2.458 7.52345 2.719 7.50945 3.098C7.50322 3.37199 7.42745 3.6399 7.28926 3.87657C7.15107 4.11324 6.955 4.31091 6.71945 4.451C6.48035 4.58504 6.21109 4.6561 5.93698 4.6575C5.66288 4.6589 5.39291 4.59059 5.15245 4.459C4.81645 4.281 4.57345 4.183 4.33245 4.151C3.80677 4.08187 3.27515 4.22431 2.85445 4.547C2.54045 4.79 2.30645 5.193 1.84045 6C1.37445 6.807 1.14045 7.21 1.08945 7.605C1.05509 7.86545 1.07237 8.13012 1.14032 8.38389C1.20826 8.63767 1.32554 8.87556 1.48545 9.084C1.63345 9.276 1.84045 9.437 2.16145 9.639C2.63445 9.936 2.93845 10.442 2.93845 11C2.93845 11.558 2.63445 12.064 2.16145 12.36C1.84045 12.563 1.63245 12.724 1.48545 12.916C1.32554 13.1244 1.20826 13.3623 1.14032 13.6161C1.07237 13.8699 1.05509 14.1345 1.08945 14.395C1.14145 14.789 1.37445 15.193 1.83945 16C2.30645 16.807 2.53945 17.21 2.85445 17.453C3.06289 17.6129 3.30078 17.7302 3.55456 17.7981C3.80833 17.8661 4.073 17.8834 4.33345 17.849C4.57345 17.817 4.81645 17.719 5.15245 17.541C5.39291 17.4094 5.66288 17.3411 5.93698 17.3425C6.21109 17.3439 6.48035 17.415 6.71945 17.549C7.20245 17.829 7.48945 18.344 7.50945 18.902C7.52345 19.282 7.55945 19.542 7.65245 19.765C7.75296 20.0078 7.90035 20.2284 8.08617 20.4143C8.272 20.6001 8.49263 20.7475 8.73545 20.848C9.10245 21 9.56845 21 10.5005 21C11.4325 21 11.8985 21 12.2655 20.848C12.5083 20.7475 12.7289 20.6001 12.9147 20.4143C13.1006 20.2284 13.2479 20.0078 13.3484 19.765C13.4404 19.542 13.4775 19.282 13.4915 18.902C13.5115 18.344 13.7985 17.828 14.2815 17.549C14.5206 17.415 14.7898 17.3439 15.0639 17.3425C15.338 17.3411 15.608 17.4094 15.8484 17.541C16.1844 17.719 16.4274 17.817 16.6674 17.849C16.9279 17.8834 17.1926 17.8661 17.4463 17.7981C17.7001 17.7302 17.938 17.6129 18.1465 17.453C18.4615 17.211 18.6944 16.807 19.1604 16C19.6264 15.193 19.8604 14.79 19.9114 14.395C19.9458 14.1345 19.9285 13.8699 19.8606 13.6161C19.7926 13.3623 19.6754 13.1244 19.5154 12.916C19.3674 12.724 19.1605 12.563 18.8395 12.361C18.6052 12.2186 18.411 12.019 18.275 11.7809C18.1391 11.5428 18.066 11.2741 18.0625 11C18.0625 10.442 18.3665 9.936 18.8395 9.64C19.1605 9.437 19.3684 9.276 19.5154 9.084C19.6754 8.87556 19.7926 8.63767 19.8606 8.38389C19.9285 8.13012 19.9458 7.86545 19.9114 7.605C19.8594 7.211 19.6264 6.807 19.1614 6C18.6944 5.193 18.4615 4.79 18.1465 4.547C17.938 4.38709 17.7001 4.26981 17.4463 4.20187C17.1926 4.13392 16.9279 4.11664 16.6674 4.151C16.4274 4.183 16.1845 4.281 15.8475 4.459C15.6071 4.59042 15.3373 4.65862 15.0634 4.65722C14.7895 4.65582 14.5204 4.58486 14.2815 4.451C14.0459 4.31091 13.8498 4.11324 13.7116 3.87657C13.5734 3.6399 13.4977 3.37199 13.4915 3.098C13.4775 2.718 13.4414 2.458 13.3484 2.235C13.2479 1.99218 13.1006 1.77155 12.9147 1.58572C12.7289 1.3999 12.5083 1.25251 12.2655 1.152Z"
          stroke="#001FCC"
          strokeWidth="1.5"
        />
      </svg>
    ),
  },
];

const page = () => {
  const divRef = useRef<HTMLDivElement>();
  const router = useRouter();

  useEffect(() => {
    if (!divRef) return;
    calculateAndSetMaxHeight(divRef);
  }, []);

  return (
    <section className="flex flex-col">
      <section className="border-b flex justify-between px-4 py-2">
        <Button
          className="flex gap-2"
          variant={"ghost"}
          onClick={() => router.back()}
        >
          <svg
            stroke="currentColor"
            fill="currentColor"
            strokeWidth={0}
            viewBox="0 0 24 24"
            height="1em"
            width="1em"
            xmlns="http://www.w3.org/2000/svg"
          >
            <path d="M21 11L6.414 11 11.707 5.707 10.293 4.293 2.586 12 10.293 19.707 11.707 18.293 6.414 13 21 13z" />
          </svg>

          <span>Back</span>
        </Button>
        <Input
          type="text"
          className="outline-0 bg-transparent border-0 max-w-fit px-4 focus-visible:ring-sky-300 flex justify-center"
          value="Untitled"
        />
        <div className="flex gap-2">
          <Button
            className="flex gap-2"
            variant={"ghost"}
            onClick={() => router.back()}
          >
            <svg
              stroke="currentColor"
              fill="currentColor"
              strokeWidth={0}
              viewBox="0 0 1024 1024"
              height="1em"
              width="1em"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path d="M912 190h-69.9c-9.8 0-19.1 4.5-25.1 12.2L404.7 724.5 207 474a32 32 0 0 0-25.1-12.2H112c-6.7 0-10.4 7.7-6.3 12.9l273.9 347c12.8 16.2 37.4 16.2 50.3 0l488.4-618.9c4.1-5.1.4-12.8-6.3-12.8z" />
            </svg>

            <span>Save</span>
          </Button>
          <Button className="bg-basePrimary flex gap-4 items-center">
            <svg
              stroke="currentColor"
              fill="currentColor"
              strokeWidth={0}
              viewBox="0 0 24 24"
              height="1.5em"
              width="1.5em"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                d="M16.9498 5.96781L15.5356 7.38203L13 4.84646V17.0421H11V4.84653L8.46451 7.38203L7.05029 5.96781L12 1.01807L16.9498 5.96781Z"
                fill="currentColor"
              />
              <path
                d="M5 20.9819V10.9819H9V8.98193H3V22.9819H21V8.98193H15V10.9819H19V20.9819H5Z"
                fill="currentColor"
              />
            </svg>

            <span>Export</span>
          </Button>
        </div>
      </section>
      <section className="relative h-max">
        <div className="mr-[60%]">
          <Tabs defaultValue="" className="flex" ref={divRef}>
            {
              <TabsList className="bg-transparent flex flex-col justify-between [height:unset_!important]">
                {tabs.map(({ label, value, icon }) => (
                  <TabsTrigger
                    className="data-[state=active]:shadow-none px-4 data-[state=active]:bg-transparent data-[state=active]:border-b-2 data-[state=active]:border-b-basePrimary data-[state=active]:text-basePrimary rounded-none flex flex-col gap-1"
                    value={value}
                  >
                    {icon}
                    <span className="capitalize">{label}</span>
                  </TabsTrigger>
                ))}
              </TabsList>
            }
            <TabsContent value="">
              <div>here</div>
            </TabsContent>
          </Tabs>
        </div>
      </section>
    </section>
  );
};

export default page;
